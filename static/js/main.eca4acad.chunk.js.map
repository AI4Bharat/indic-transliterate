{"version":3,"sources":["../../src/constants/TriggerKeys.ts","../../src/util/suggestions-util.ts","../../src/constants/Urls.ts","../../src/util/getTransliterationLanguages.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["KEY_RETURN","KEY_ENTER","KEY_TAB","KEY_SPACE","cachedData","localStorage","getItem","JSON","parse","setItem","stringify","window","addEventListener","async","sessionStorage","apiURL","Headers","append","requestOptions","method","res","fetch","data","json","e","console","error","renderComponent","props","lang","offsetX","offsetY","onChange","onChangeText","onBlur","value","onKeyDown","containerClassName","containerStyles","activeItemStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","showCurrentWordAsLastSuggestion","enabled","horizontalView","customApiURL","rest","left","setLeft","top","setTop","selection","setSelection","matchStart","setMatchStart","matchEnd","setMatchEnd","inputRef","windowSize","setWindowSize","width","height","direction","setDirection","googleFont","setGoogleFont","options","setOptions","logJsonArray","setLogJsonArray","numSpaces","setNumSpaces","parentUuid","setParentUuid","uuid","setUuid","Math","random","toString","substr","subStrLength","setSubStrLength","restart","setRestart","shouldRenderSuggestions","reset","handleSelection","index","currentString","newValue","substring","length","lastLogJson","logJson","keystrokes","results","opted","created_at","Date","toISOString","language","setTimeout","elem","caretPos","current","selectionStart","focus","setSelectionRange","target","renderSuggestions","lastWord","wholeText","word","config","toLowerCase","frequency","suggestions","replace","encodeURIComponent","log","includes","result","output","found","Object","keys","lowestFreqWord","dictionary","lowestFreq","Infinity","fallback","handleResize","innerWidth","innerHeight","removeEventListener","langList","langObj","find","l","LangCode","Direction","GoogleFont","FallbackFont","getDirectionAndFont","then","fallbackFont","document","getElementById","link","createElement","id","href","rel","head","appendChild","style","position","className","currentTarget","finalJson","undefined","body","headers","ok","catch","err","caret","el","selectionEnd","start","end","input","indexOfLastSpace","lastIndexOf","currentWord","slice","rect","getBoundingClientRect","min","event","key","preventDefault","navigator","maxTouchPoints","msMaxTouchPoints","ref","fontFamily","backgroundClip","backgroundColor","border","boxShadow","display","fontSize","listStyle","padding","textAlign","zIndex","Array","from","Set","map","item","cursor","minWidth","color","onMouseEnter","onClick","App","text","setText","useState","languages","setLanguages","setLang","useEffect","getTransliterationLanguages","langs","_jsxs","children","_jsx","DisplayName","htmlFor","IndicTransliterate","placeholder","Input","fullWidth","ReactDOM","render"],"mappings":"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","file":"static/js/main.eca4acad.chunk.js","sourcesContent":["export const TriggerKeys = {\n  KEY_RETURN: \"Enter\",\n  KEY_ENTER: \"Enter\",\n  KEY_TAB: \"Tab\",\n  KEY_SPACE: \" \",\n};\n","import { Language } from \"../types/Language\";\n\ntype Config = {\n  // numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\ntype CacheEntry = {\n  suggestions: string[];\n  frequency: number;\n};\n\nconst MAX_CACHE_SIZE = 10000;\nconst SAVE_THRESHOLD = 20;\nconst CACHE_KEY = 'transliterateCache';\n\nconst cache: Record<string, Record<string, CacheEntry>> = loadCacheFromLocalStorage();\nlet newEntriesCount = 0;\n\nfunction loadCacheFromLocalStorage(): Record<string, Record<string, CacheEntry>> {\n  const cachedData = localStorage.getItem(CACHE_KEY);\n  return cachedData ? JSON.parse(cachedData) : {};\n}\n\nfunction saveCacheToLocalStorage() {\n  localStorage.setItem(CACHE_KEY, JSON.stringify(cache));\n}\n\nconst getWordWithLowestFrequency = (dictionary: Record<string, CacheEntry>): string | null => {\n  let lowestFreqWord: string | null = null;\n  let lowestFreq = Infinity;\n\n  for (const word in dictionary) {\n    if (dictionary[word].frequency < lowestFreq) {\n      lowestFreq = dictionary[word].frequency;\n      lowestFreqWord = word;\n    }\n  }\n\n  return lowestFreqWord;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  customApiURL: string,\n  config?: Config,\n): Promise<string[] | undefined> => {\n  const {\n    // numOptions = 5,\n    showCurrentWordAsLastSuggestion = true,\n    lang = \"hi\",\n  } = config || {};\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n  // let myHeaders = new Headers();\n  // myHeaders.append(\"Content-Type\", \"application/json\");\n\n  if (!cache[lang]) {\n    cache[lang] = {};\n  }\n\n  if (cache[lang][word.toLowerCase()]) {\n    cache[lang][word.toLowerCase()].frequency += 1;\n    return cache[lang][word.toLowerCase()].suggestions;\n  }\n\n  const requestOptions = {\n    method: \"GET\",\n  };\n\n  try {\n    const res = await fetch(\n      customApiURL +\n        `${lang}/${\n          word === \".\" || word === \"..\"\n            ? \" \" + word.replace(\".\", \"%2E\")\n            : encodeURIComponent(word).replace(\".\", \"%2E\")\n        }`,\n      requestOptions,\n    );\n    let data = await res.json();\n    console.log(\"library data\", data);\n    if (!customApiURL.includes(\"xlit-api\")) {\n      data.result = data.output[0].target;\n    }\n    if (data && data.result.length > 0) {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data.result, word]\n        : data.result;\n\n      if (Object.keys(cache[lang]).length >= MAX_CACHE_SIZE) {\n        const lowestFreqWord = getWordWithLowestFrequency(cache[lang]);\n        if (lowestFreqWord) {\n          delete cache[lang][lowestFreqWord];\n        }\n      }\n\n      cache[lang][word.toLowerCase()] = {\n        suggestions: found,\n        frequency: 1,\n      };\n\n      newEntriesCount += 1;\n      if (newEntriesCount >= SAVE_THRESHOLD) {\n        saveCacheToLocalStorage();\n        newEntriesCount = 0;\n      }\n\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        const fallback = [word];\n        cache[lang][word.toLowerCase()] = {\n          suggestions: fallback,\n          frequency: 1,\n        };\n        return fallback;\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};\n\nwindow.addEventListener('beforeunload', saveCacheToLocalStorage);","export const BASE_URL = \"https://xlit-api.ai4bharat.org/\";\nexport const BASE_URL_TL = \"https://xlit-api.ai4bharat.org/tl/\";\n","import { LangObject } from \"../types/LangObject\";\nimport { BASE_URL } from \"../constants/Urls\";\n\nexport const getTransliterationLanguages = async (): Promise<\n  LangObject[] | undefined\n> => {\n  if (sessionStorage.getItem(\"indic_transliterate__supported_languages\")) {\n    return JSON.parse(\n      sessionStorage.getItem(\"indic_transliterate__supported_languages\") || \"\",\n    );\n  } else {\n    const apiURL = `${BASE_URL}languages`;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n      method: \"GET\",\n    };\n    try {\n      const res = await fetch(apiURL, requestOptions);\n      const data = await res.json();\n      sessionStorage.setItem(\n        \"indic_transliterate__supported_languages\",\n        JSON.stringify(data),\n      );\n      return data;\n    } catch (e) {\n      console.error(\"There was an error with transliteration\", e);\n      return [];\n    }\n  }\n};\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport { IndicTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { LangObject } from \"./types/LangObject\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\nimport { getTransliterationLanguages } from \"./util/getTransliterationLanguages\";\nimport { BASE_URL_TL } from \"./constants/Urls\";\n\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\nconst KEY_LEFT = \"ArrowLeft\";\nconst KEY_RIGHT = \"ArrowRight\";\nconst KEY_ESCAPE = \"Escape\";\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const IndicTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  horizontalView = false,\n  customApiURL = BASE_URL_TL,\n  ...rest\n}: IndicTransliterateProps): JSX.Element => {\n  interface LogJson {\n    keystrokes: any;\n    results: any;\n    opted: any;\n    created_at: any;\n    language: any;\n  }\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n  const [direction, setDirection] = useState(\"ltr\");\n  const [googleFont, setGoogleFont] = useState<string | null>(null);\n  const [options, setOptions] = useState<string[]>([]);\n  const [logJsonArray, setLogJsonArray] = useState<LogJson[]>([]);\n  const [numSpaces, setNumSpaces] = useState(0);\n  const [parentUuid, setParentUuid] = useState(\"0\");\n  const [uuid, setUuid] = useState(Math.random().toString(36).substr(2, 9));\n  const [subStrLength, setSubStrLength] = useState(0);\n  const [restart, setRestart] = useState(true);\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number) => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    if(logJsonArray.length){\n      let lastLogJson = logJsonArray[logJsonArray.length-1];\n      let logJson:LogJson = {\n        keystrokes: lastLogJson.keystrokes,\n        results: lastLogJson.results,\n        opted: options[index],\n        created_at: new Date().toISOString(),\n        language: lang};\n      setLogJsonArray([...logJsonArray, logJson]);\n      setNumSpaces(numSpaces+1);\n    }\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        matchStart + options[index].length + 1\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string, wholeText: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    // const numOptions = showCurrentWordAsLastSuggestion\n    //   ? maxOptions - 1\n    //   : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, customApiURL, {\n      // numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data ?? []);\n    let logJson:LogJson = {\n              keystrokes: wholeText,\n              results: data,\n              opted: \"\",\n              created_at: new Date().toISOString(),\n              language: lang}\n\n    if(restart){\n      setRestart(false);\n      setLogJsonArray([logJson]);\n    }else{\n      setLogJsonArray([...logJsonArray, logJson]);\n    }\n  };\n\n  const getDirectionAndFont = async (lang: Language) => {\n    const langList = await getTransliterationLanguages();\n    const langObj = langList?.find((l) => l.LangCode === lang) as LangObject;\n    return [\n      langObj?.Direction ?? \"ltr\",\n      langObj?.GoogleFont,\n      langObj?.FallbackFont,\n    ];\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    if(numSpaces == 0 || restart){\n      if(value.length >= 4){\n      setSubStrLength(value.length-4);\n      }else{\n      setSubStrLength(0);\n      }\n    } \n\n    if (numSpaces >= 5){\n      const finalJson = {\"uuid\": uuid, \"parent_uuid\": parentUuid, \"word\": value, \"source\": localStorage.getItem('source') != undefined ? localStorage.getItem('source') : \"node-module\", \"language\": lang, \"steps\":logJsonArray};\n      setLogJsonArray([]);\n      setParentUuid(uuid);\n      setUuid(Math.random().toString(36).substr(2, 9));\n      setSubStrLength(value.length-2);\n      setNumSpaces(0);\n      setRestart(true);\n      fetch(\"https://backend.shoonya.ai4bharat.org/logs/transliteration_selection/\", {\n        method: \"POST\",\n        body: JSON.stringify(finalJson),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n      })\n      .then(async (res) => {\n        if (!res.ok) {throw await res.json()};\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n    }\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n    if(numSpaces == 0 || restart){\n      if(value.length >= 4){\n      renderSuggestions(currentWord, value.substr(value.length-4, value.length));\n      }else{\n      renderSuggestions(currentWord, value.substr(0, value.length));\n      }\n    }else{\n      renderSuggestions(currentWord, value.substr(subStrLength, value.length));\n    }\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.key)) {\n        event.preventDefault();\n        handleSelection(selection);\n      } else {\n        switch (event.key) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          case KEY_LEFT:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_RIGHT:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    getDirectionAndFont(lang).then(([direction, googleFont, fallbackFont]) => {\n      setDirection(direction);\n      // import google font if not already imported\n      if (googleFont) {\n        if (!document.getElementById(`font-${googleFont}`)) {\n          const link = document.createElement(\"link\");\n          link.id = `font-${googleFont}`;\n          link.href = `https://fonts.googleapis.com/css?family=${googleFont}`;\n          link.rel = \"stylesheet\";\n          document.head.appendChild(link);\n        }\n        setGoogleFont(`${googleFont}, ${fallbackFont ?? \"sans-serif\"}`);\n      } else {\n        setGoogleFont(null);\n      }\n    });\n  }, [lang]);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        lang: lang,\n        style: {\n          direction: direction,\n          ...(googleFont && { fontFamily: googleFont }),\n        },\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            backgroundClip : \"padding-box\",\n            backgroundColor : \"#fff\",\n            border : \"1px solid rgba(0, 0, 0, 0.15)\",\n            boxShadow : \"0 6px 12px rgba(0, 0, 0, 0.175)\",\n            display: horizontalView ? \"flex\" : \"block\",\n            fontSize: \"14px\",\n            listStyle: \"none\",\n            padding: \"1px\",\n            textAlign: \"center\",\n            zIndex: 20000,\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n            ...(googleFont && { fontFamily: googleFont }),\n          }}\n          data-testid=\"rt-suggestions-list\"\n          lang={lang}\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              style={index === selection ? { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#65c3d7\", color:\"#fff\"} : { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#fff\"} }\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { IndicTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\nexport { getTransliterationLanguages };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\n// import component\nimport { IndicTransliterate, getTransliterationLanguages } from \"@ai4bharat/indic-transliterate\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\nimport { LangObject } from \"../../dist/types\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [languages, setLanguages] = useState<LangObject[]|undefined>();\n  const [lang, setLang] = useState(\"hi\");\n\n  useEffect(() => {\n    getTransliterationLanguages().then(langs => setLanguages(langs));\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h2>Indic transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value)}\n      >\n        {languages?.map((l) => (\n          <option key={l.LangCode} value={l.LangCode}>\n            {l.DisplayName}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <IndicTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <IndicTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <IndicTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props.ref;\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}