{"version":3,"sources":["../../src/constants/TriggerKeys.ts","../../src/constants/Urls.ts","../../src/util/getTransliterationLanguages.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/suggestions-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["KEY_RETURN","KEY_ENTER","KEY_TAB","KEY_SPACE","async","sessionStorage","getItem","JSON","parse","apiURL","Headers","append","requestOptions","method","res","fetch","data","json","setItem","stringify","e","console","error","renderComponent","props","lang","offsetX","offsetY","onChange","onChangeText","onBlur","value","onKeyDown","containerClassName","containerStyles","activeItemStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","showCurrentWordAsLastSuggestion","enabled","horizontalView","rest","left","setLeft","top","setTop","selection","setSelection","matchStart","setMatchStart","matchEnd","setMatchEnd","inputRef","windowSize","setWindowSize","width","height","direction","setDirection","googleFont","setGoogleFont","options","setOptions","logJsonArray","setLogJsonArray","numSpaces","setNumSpaces","parentUuid","setParentUuid","uuid","setUuid","Math","random","toString","substr","subStrLength","setSubStrLength","restart","setRestart","shouldRenderSuggestions","reset","handleSelection","index","currentString","newValue","substring","length","lastLogJson","logJson","keystrokes","results","opted","created_at","Date","toISOString","language","setTimeout","elem","caretPos","current","selectionStart","focus","setSelectionRange","target","renderSuggestions","lastWord","wholeText","numOptions","word","config","replace","encodeURIComponent","log","result","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","langList","langObj","find","l","LangCode","Direction","GoogleFont","FallbackFont","getDirectionAndFont","then","fallbackFont","document","getElementById","link","createElement","id","href","rel","head","appendChild","style","position","className","currentTarget","finalJson","undefined","localStorage","body","headers","ok","catch","err","caret","el","selectionEnd","start","end","input","indexOfLastSpace","lastIndexOf","currentWord","slice","rect","getBoundingClientRect","min","event","includes","key","preventDefault","navigator","maxTouchPoints","msMaxTouchPoints","ref","fontFamily","backgroundClip","backgroundColor","border","boxShadow","display","fontSize","listStyle","padding","textAlign","zIndex","Array","from","Set","map","item","cursor","minWidth","color","onMouseEnter","onClick","App","text","setText","useState","languages","setLanguages","setLang","useEffect","getTransliterationLanguages","langs","_jsxs","children","_jsx","DisplayName","htmlFor","IndicTransliterate","placeholder","Input","fullWidth","ReactDOM","render"],"mappings":"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","file":"static/js/main.e60179ba.chunk.js","sourcesContent":["export const TriggerKeys = {\n  KEY_RETURN: \"Enter\",\n  KEY_ENTER: \"Enter\",\n  KEY_TAB: \"Tab\",\n  KEY_SPACE: \" \",\n};\n","export const BASE_URL = \"https://xlit-api.ai4bharat.org/\";\n","import { LangObject } from \"../types/LangObject\";\nimport { BASE_URL } from \"../constants/Urls\";\n\nexport const getTransliterationLanguages = async (): Promise<\n  LangObject[] | undefined\n> => {\n  if (sessionStorage.getItem(\"indic_transliterate__supported_languages\")) {\n    return JSON.parse(\n      sessionStorage.getItem(\"indic_transliterate__supported_languages\") || \"\",\n    );\n  } else {\n    const apiURL = `${BASE_URL}languages`;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n      method: \"GET\",\n    };\n    try {\n      const res = await fetch(apiURL, requestOptions);\n      const data = await res.json();\n      sessionStorage.setItem(\n        \"indic_transliterate__supported_languages\",\n        JSON.stringify(data),\n      );\n      return data;\n    } catch (e) {\n      console.error(\"There was an error with transliteration\", e);\n      return [];\n    }\n  }\n};\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport { IndicTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { LangObject } from \"./types/LangObject\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\nimport { getTransliterationLanguages } from \"./util/getTransliterationLanguages\";\n\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\nconst KEY_LEFT = \"ArrowLeft\";\nconst KEY_RIGHT = \"ArrowRight\";\nconst KEY_ESCAPE = \"Escape\";\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const IndicTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  horizontalView = false,\n  ...rest\n}: IndicTransliterateProps): JSX.Element => {\n  interface LogJson {\n    keystrokes: any;\n    results: any;\n    opted: any;\n    created_at: any;\n    language: any;\n  }\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n  const [direction, setDirection] = useState(\"ltr\");\n  const [googleFont, setGoogleFont] = useState<string | null>(null);\n  const [options, setOptions] = useState<string[]>([]);\n  const [logJsonArray, setLogJsonArray] = useState<LogJson[]>([]);\n  const [numSpaces, setNumSpaces] = useState(0);\n  const [parentUuid, setParentUuid] = useState(\"0\");\n  const [uuid, setUuid] = useState(Math.random().toString(36).substr(2, 9));\n  const [subStrLength, setSubStrLength] = useState(0);\n  const [restart, setRestart] = useState(true);\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number) => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    if(logJsonArray.length){\n      let lastLogJson = logJsonArray[logJsonArray.length-1];\n      let logJson:LogJson = {\n        keystrokes: lastLogJson.keystrokes,\n        results: lastLogJson.results,\n        opted: options[index],\n        created_at: new Date().toISOString(),\n        language: lang};\n      setLogJsonArray([...logJsonArray, logJson]);\n      setNumSpaces(numSpaces+1);\n    }\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        matchStart + options[index].length + 1\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string, wholeText: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, {\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data ?? []);\n    let logJson:LogJson = {\n              keystrokes: wholeText,\n              results: data,\n              opted: \"\",\n              created_at: new Date().toISOString(),\n              language: lang}\n\n    if(restart){\n      setRestart(false);\n      setLogJsonArray([logJson]);\n    }else{\n      setLogJsonArray([...logJsonArray, logJson]);\n    }\n  };\n\n  const getDirectionAndFont = async (lang: Language) => {\n    const langList = await getTransliterationLanguages();\n    const langObj = langList?.find((l) => l.LangCode === lang) as LangObject;\n    return [\n      langObj?.Direction ?? \"ltr\",\n      langObj?.GoogleFont,\n      langObj?.FallbackFont,\n    ];\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    if(numSpaces == 0 || restart){\n      if(value.length >= 4){\n      setSubStrLength(value.length-4);\n      }else{\n      setSubStrLength(0);\n      }\n    } \n\n    if (numSpaces >= 5){\n      const finalJson = {\"uuid\": uuid, \"parent_uuid\": parentUuid, \"word\": value, \"source\": localStorage.getItem('source') != undefined ? localStorage.getItem('source') : \"node-module\", \"language\": lang, \"steps\":logJsonArray};\n      setLogJsonArray([]);\n      setParentUuid(uuid);\n      setUuid(Math.random().toString(36).substr(2, 9));\n      setSubStrLength(value.length-2);\n      setNumSpaces(0);\n      setRestart(true);\n      fetch(\"https://backend.shoonya.ai4bharat.org/logs/transliteration_selection/\", {\n        method: \"POST\",\n        body: JSON.stringify(finalJson),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n      })\n      .then(async (res) => {\n        if (!res.ok) {throw await res.json()};\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n    }\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n    if(numSpaces == 0 || restart){\n      if(value.length >= 4){\n      renderSuggestions(currentWord, value.substr(value.length-4, value.length));\n      }else{\n      renderSuggestions(currentWord, value.substr(0, value.length));\n      }\n    }else{\n      renderSuggestions(currentWord, value.substr(subStrLength, value.length));\n    }\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.key)) {\n        event.preventDefault();\n        handleSelection(selection);\n      } else {\n        switch (event.key) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          case KEY_LEFT:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_RIGHT:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    getDirectionAndFont(lang).then(([direction, googleFont, fallbackFont]) => {\n      setDirection(direction);\n      // import google font if not already imported\n      if (googleFont) {\n        if (!document.getElementById(`font-${googleFont}`)) {\n          const link = document.createElement(\"link\");\n          link.id = `font-${googleFont}`;\n          link.href = `https://fonts.googleapis.com/css?family=${googleFont}`;\n          link.rel = \"stylesheet\";\n          document.head.appendChild(link);\n        }\n        setGoogleFont(`${googleFont}, ${fallbackFont ?? \"sans-serif\"}`);\n      } else {\n        setGoogleFont(null);\n      }\n    });\n  }, [lang]);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        lang: lang,\n        style: {\n          direction: direction,\n          ...(googleFont && { fontFamily: googleFont }),\n        },\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            backgroundClip : \"padding-box\",\n            backgroundColor : \"#fff\",\n            border : \"1px solid rgba(0, 0, 0, 0.15)\",\n            boxShadow : \"0 6px 12px rgba(0, 0, 0, 0.175)\",\n            display: horizontalView ? \"flex\" : \"block\",\n            fontSize: \"14px\",\n            listStyle: \"none\",\n            padding: \"1px\",\n            textAlign: \"center\",\n            zIndex: 20000,\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n            ...(googleFont && { fontFamily: googleFont }),\n          }}\n          data-testid=\"rt-suggestions-list\"\n          lang={lang}\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              style={index === selection ? { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#65c3d7\", color:\"#fff\"} : { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#fff\"} }\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { IndicTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\nexport { getTransliterationLanguages };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","import { Language } from \"../types/Language\";\nimport { BASE_URL } from \"../constants/Urls\";\n\ntype Config = {\n  numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  config?: Config,\n): Promise<string[] | undefined> => {\n  const { showCurrentWordAsLastSuggestion, lang } = config || {\n    numOptions: 5,\n    showCurrentWordAsLastSuggestion: true,\n    lang: \"hi\",\n  };\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n  // let myHeaders = new Headers();\n  // myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: \"GET\",\n  };\n\n  try {\n    const res = await fetch(\n      BASE_URL +\n        `tl/${lang}/${\n          word === \".\" || word === \"..\"\n            ? \" \" + word.replace(\".\", \"%2E\")\n            : encodeURIComponent(word).replace(\".\", \"%2E\")\n        }`,\n      requestOptions,\n    );\n    const data = await res.json();\n     console.log(\"library data\", data);\n    if (data && data.result.length > 0) {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data.result, word]\n        : data.result;\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        return [word];\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\n// import component\nimport { IndicTransliterate, getTransliterationLanguages } from \"@ai4bharat/indic-transliterate\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\nimport { LangObject } from \"../../dist/types\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [languages, setLanguages] = useState<LangObject[]|undefined>();\n  const [lang, setLang] = useState(\"hi\");\n\n  useEffect(() => {\n    getTransliterationLanguages().then(langs => setLanguages(langs));\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h2>Indic transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value)}\n      >\n        {languages?.map((l) => (\n          <option key={l.LangCode} value={l.LangCode}>\n            {l.DisplayName}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <IndicTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <IndicTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <IndicTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props.ref;\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}