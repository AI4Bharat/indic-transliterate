{"version":3,"sources":["../../src/constants/TriggerKeys.ts","../../src/constants/Urls.ts","../../src/util/suggestions-util.ts","../../src/util/getTransliterationLanguages.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["word","config","showCurrentWordAsLastSuggestion","numOptions","lang","requestOptions","method","fetch","replace","encodeURIComponent","res","json","data","console","log","result","length","found","error","sessionStorage","getItem","JSON","parse","apiURL","Headers","append","setItem","stringify","renderComponent","props","offsetX","offsetY","onChange","onChangeText","onBlur","value","onKeyDown","containerClassName","containerStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","enabled","rest","options","setOptions","left","setLeft","top","setTop","selection","setSelection","matchStart","setMatchStart","matchEnd","setMatchEnd","inputRef","width","height","windowSize","setWindowSize","direction","setDirection","googleFont","setGoogleFont","shouldRenderSuggestions","reset","handleSelection","index","triggerKey","currentString","newValue","substring","setTimeout","elem","caretPos","current","selectionStart","focus","setSelectionRange","e","target","renderSuggestions","lastWord","getDirectionAndFont","langList","langObj","find","l","LangCode","Direction","GoogleFont","FallbackFont","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","then","fallbackFont","document","getElementById","link","createElement","id","href","rel","head","appendChild","style","position","className","currentTarget","el","caret","selectionEnd","start","end","input","indexOfLastSpace","lastIndexOf","currentWord","slice","rect","getBoundingClientRect","Math","min","event","includes","key","preventDefault","navigator","maxTouchPoints","msMaxTouchPoints","ref","fontFamily","backgroundClip","backgroundColor","border","boxShadow","display","fontSize","listStyle","padding","textAlign","zIndex","Array","from","Set","map","item","cursor","minWidth","color","onMouseEnter","onClick","App","useState","text","setText","languages","setLanguages","setLang","useEffect","getTransliterationLanguages","langs","DisplayName","htmlFor","placeholder","Input","fullWidth","ReactDOM","render"],"mappings":"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","file":"static/js/main.ac06be3e.chunk.js","sourcesContent":["export const TriggerKeys = {\n  KEY_RETURN: \"Enter\",\n  KEY_ENTER: \"Enter\",\n  KEY_TAB: \"Tab\",\n  KEY_SPACE: \" \",\n};\n","export const BASE_URL = \"https://xlit-api.ai4bharat.org/\";\n","import { Language } from \"../types/Language\";\nimport { BASE_URL } from \"../constants/Urls\";\n\ntype Config = {\n  numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  config?: Config,\n): Promise<string[] | undefined> => {\n  const { showCurrentWordAsLastSuggestion, lang } = config || {\n    numOptions: 5,\n    showCurrentWordAsLastSuggestion: true,\n    lang: \"hi\",\n  };\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n  // let myHeaders = new Headers();\n  // myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: \"GET\",\n  };\n\n  try {\n    const res = await fetch(\n      BASE_URL +\n        `tl/${lang}/${\n          word === \".\" || word === \"..\"\n            ? \" \" + word.replace(\".\", \"%2E\")\n            : encodeURIComponent(word).replace(\".\", \"%2E\")\n        }`,\n      requestOptions,\n    );\n    const data = await res.json();\n     console.log(\"library data\", data);\n    if (data && data.result.length > 0) {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data.result, word]\n        : data.result;\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        return [word];\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};\n","import { LangObject } from \"../types/LangObject\";\nimport { BASE_URL } from \"../constants/Urls\";\n\nexport const getTransliterationLanguages = async (): Promise<\n  LangObject[] | undefined\n> => {\n  if (sessionStorage.getItem(\"indic_transliterate__supported_languages\")) {\n    return JSON.parse(\n      sessionStorage.getItem(\"indic_transliterate__supported_languages\") || \"\",\n    );\n  } else {\n    const apiURL = `${BASE_URL}languages`;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n      method: \"GET\",\n    };\n    try {\n      const res = await fetch(apiURL, requestOptions);\n      const data = await res.json();\n      sessionStorage.setItem(\n        \"indic_transliterate__supported_languages\",\n        JSON.stringify(data),\n      );\n      return data;\n    } catch (e) {\n      console.error(\"There was an error with transliteration\", e);\n      return [];\n    }\n  }\n};\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport { IndicTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { LangObject } from \"./types/LangObject\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\nimport { getTransliterationLanguages } from \"./util/getTransliterationLanguages\";\n\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\nconst KEY_ESCAPE = \"Escape\";\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const IndicTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  ...rest\n}: IndicTransliterateProps): JSX.Element => {\n  const [options, setOptions] = useState<string[]>([]);\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n  const [direction, setDirection] = useState(\"ltr\");\n  const [googleFont, setGoogleFont] = useState<string | null>(null);\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number, triggerKey = \" \") => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        triggerKey === \"Enter\"\n          ? matchStart + options[index].length\n          : matchStart + options[index].length + 1,\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, {\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data ?? []);\n  };\n\n  const getDirectionAndFont = async (lang: Language) => {\n    const langList = await getTransliterationLanguages();\n    const langObj = langList?.find((l) => l.LangCode === lang) as LangObject;\n    return [\n      langObj?.Direction ?? \"ltr\",\n      langObj?.GoogleFont,\n      langObj?.FallbackFont,\n    ];\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n      renderSuggestions(currentWord);\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.key)) {\n        event.preventDefault();\n        handleSelection(selection, event.key);\n      } else {\n        switch (event.key) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    getDirectionAndFont(lang).then(([direction, googleFont, fallbackFont]) => {\n      setDirection(direction);\n      // import google font if not already imported\n      if (googleFont) {\n        if (!document.getElementById(`font-${googleFont}`)) {\n          const link = document.createElement(\"link\");\n          link.id = `font-${googleFont}`;\n          link.href = `https://fonts.googleapis.com/css?family=${googleFont}`;\n          link.rel = \"stylesheet\";\n          document.head.appendChild(link);\n        }\n        setGoogleFont(`${googleFont}, ${fallbackFont ?? \"sans-serif\"}`);\n      } else {\n        setGoogleFont(null);\n      }\n    });\n  }, [lang]);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        lang: lang,\n        style: {\n          direction: direction,\n          ...(googleFont && { fontFamily: googleFont }),\n        },\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            backgroundClip : \"padding-box\",\n            backgroundColor : \"#fff\",\n            border : \"1px solid rgba(0, 0, 0, 0.15)\",\n            boxShadow : \"0 6px 12px rgba(0, 0, 0, 0.175)\",\n            display: \"block\",\n            fontSize: \"14px\",\n            listStyle: \"none\",\n            padding: \"1px\",\n            textAlign: \"left\",\n            zIndex: 20000,\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n            ...(googleFont && { fontFamily: googleFont }),\n          }}\n          data-testid=\"rt-suggestions-list\"\n          lang={lang}\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              style={index === selection ? { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#65c3d7\", color:\"#fff\"} : { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#fff\"} }\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { IndicTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\nexport { getTransliterationLanguages };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\n// import component\nimport { IndicTransliterate, getTransliterationLanguages } from \"@ai4bharat/indic-transliterate\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\nimport { LangObject } from \"../../dist/types\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [languages, setLanguages] = useState<LangObject[]|undefined>();\n  const [lang, setLang] = useState(\"hi\");\n\n  useEffect(() => {\n    getTransliterationLanguages().then(langs => setLanguages(langs));\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h2>Indic transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value)}\n      >\n        {languages?.map((l) => (\n          <option key={l.LangCode} value={l.LangCode}>\n            {l.DisplayName}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <IndicTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <IndicTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <IndicTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props.ref;\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}